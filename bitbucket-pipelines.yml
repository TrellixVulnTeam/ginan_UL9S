clone:
  lfs: true

pipelines:
  default:
    - step:
        name: Build docker image
        services:
            - docker
        size: 2x
        script:
            - export TAG=$(git describe --exact-match || git show -s --format=%h)
            - echo git/docker tag is $TAG
            - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
            - "git log --format=%B -n 1 | grep -c PEA > .skipPod || :"
            - "git log --format=%B -n 1 | grep -c POD > .skipPea || :"
            - if    [ `cat .skipPod` != 0 ] ; then 
            -       echo "BUILDING PEA..."
            -       docker build --build-arg TARGET=pea -t "$IMAGE" -f  ./docker/Dockerfile .
            - elif  [ `cat .skipPea` != 0 ] ; then 
            -       echo "BUILDING POD..."
            -       docker build --build-arg TARGET=pod -t "$IMAGE" -f  ./docker/Dockerfile .
            - else
            -       echo "BUILDING ALL"
            -       docker build -t "$IMAGE" -f ./docker/Dockerfile .
            - fi
            - docker login -u "$DOCKER_HUB_USERNAME" -p "$DOCKER_HUB_PASSWORD"
            - docker push "$IMAGE"
            - echo $TAG > .tag
        artifacts:
            - .tag
            - .skipPod
            - .skipPea
    - parallel:
        - step:
            name: PEA 1 (GPS user)
            script:
              - if [ `cat .skipPea` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pea.sh 1
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: PEA 2 (GNSS user)
            script:
              - if [ `cat .skipPea` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pea.sh 2
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: PEA 3 (GPS SF user)
            script:
              - if [ `cat .skipPea` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pea.sh 3
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: PEA 4 (GNSS user AR)
            script:
              - if [ `cat .skipPea` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pea.sh 4
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: PEA 5 (GNSS RT user AR)
            script:
              - if [ `cat .skipPea` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pea.sh 5
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: PEA 6 (GPS ionosphere AR)
            script:
              - if [ `cat .skipPea` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pea.sh 6
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: PEA 7 (GNSS netw AR)
            script:
              - if [ `cat .skipPea` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pea.sh 7
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: PEA 8 (not working - skipped)
            script:
              - if [ `cat .skipPea` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pea.sh 8
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD 1 (GPS mode fit)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              -     export TAG=$(cat .tag)
              -     export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              -     docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 1
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD 2g (GPS fit)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 2g
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD 2r (GLONASS fit)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 2r
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD 2e (GALILEO fit)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 2e
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD 2c (BEIDOU fit)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 2c
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD 2j (QZSS fit)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 2j
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD 3 (GPS predict)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 3
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD 4 (GPS from init cond file)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 4
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD 5 (GPS fit 2)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 5
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD 6 (MEO mode fit)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 6
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: Python scripts test
            script:
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run "$IMAGE" conda run -n gn37 pytest /ginan/scripts/tests
            services:
                - docker
            size: 2x
    - parallel:
        - step:
            name: Push docker image
            services:
                - docker
            size: 2x
            script:
                - export TAG=$(cat .tag)
                - export FINAL_IMAGE="$DOCKER_HUB_USERNAME/ginan"
                - docker build -t "$FINAL_IMAGE:$TAG" -f ./docker/Dockerfile .
                - docker login -u "$DOCKER_HUB_USERNAME" -p "$DOCKER_HUB_PASSWORD"
                - docker push "$FINAL_IMAGE:$TAG"

  custom:
    long-test:
      - step:
          name: Deploy long test EC2
          image: hashicorp/terraform:0.12.29
          services:
              - docker
          size: 2x
          script:
              - export TAG=$(git describe --exact-match || git show -s --format=%h)
              - echo git/docker tag is $TAG
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker login -u "$DOCKER_HUB_USERNAME" -p "$DOCKER_HUB_PASSWORD"
              - |
                  if DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect "$IMAGE" > /dev/null
                  then
                      echo "Image already exists, skipping build."
                  else
                      docker build -t "$IMAGE" -f ./docker/Dockerfile .
                      docker push "$IMAGE"
                  fi

              - cd aws/long-tests/
              - export TF_VAR_docker_image="$IMAGE"
              - terraform init
              - terraform plan
              - terraform apply -auto-approve
    build-push-no-test:
      - step:
          name: Build and push docker image
          services:
              - docker
          size: 2x
          script:
              - export TAG=$(git describe --exact-match || git show -s --format=%h)-no-tests
              - echo git/docker tag is $TAG
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan:$TAG"
              - docker build -t "$IMAGE" -f ./docker/Dockerfile .
              - docker login -u "$DOCKER_HUB_USERNAME" -p "$DOCKER_HUB_PASSWORD"
              - docker push "$IMAGE"

  tags:
    'release-*':
      - parallel:
        - step:
            name: Release tag into public GitHub
            image: atlassian/default-image:2
            script:
              - export TAG=${BITBUCKET_TAG#release-}
              - rm -rf .git/
              - python aws/msg_cleaner.py
              - rm -rf aws/
              - rm docker/README.md
              - rm bitbucket-pipelines.yml
              - mkdir deploy_github
              - mv -f * deploy_github/ || true
              - git clone git@github.com:geoscienceaustralia/ginan.git github_sync
              - git config --global user.email "$BITBUCKET_GIT_SSH_ORIGIN"
              - git config --global user.name "ginan-release-bot"
              - cd github_sync
              - git ls-files | xargs rm
              - cp -R ../deploy_github/* .
              - git add .
              - git commit -m "Release $TAG"
              - git checkout -b $BITBUCKET_TAG
              - git tag $TAG
              - git remote -v
              - git push -u origin ${BITBUCKET_TAG}
              - git push origin --tags $TAG
        - step:
            name: Push docker image
            services:
                - docker
            size: 2x
            script:
                - export TAG=${BITBUCKET_TAG#release-}
                - export IMAGE="$DOCKER_HUB_USERNAME/ginan:$TAG"
                - export LATEST="$DOCKER_HUB_USERNAME/ginan:latest"
                - docker build -t "$IMAGE" -t "$LATEST" -f ./docker/Dockerfile .
                - docker login -u "$DOCKER_HUB_USERNAME" -p "$DOCKER_HUB_PASSWORD"
                - docker push "$IMAGE"
                - docker push "$LATEST"





definitions:
  services:
    docker:
      memory: 6000
